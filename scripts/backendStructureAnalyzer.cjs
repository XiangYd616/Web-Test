#!/usr/bin/env node

/**
 * BackendÁªìÊûÑÂàÜÊûêÂíå‰ºòÂåñÂ∑•ÂÖ∑
 * ÂàÜÊûêbackendÁõÆÂΩïÁªìÊûÑÔºåËØÜÂà´ÈúÄË¶ÅÊï¥ÁêÜ‰ºòÂåñÁöÑÈóÆÈ¢ò
 */

const fs = require('fs');
const path = require('path');

class BackendStructureAnalyzer {
  constructor() {
    this.projectRoot = process.cwd();
    this.backendRoot = path.join(this.projectRoot, 'backend');
    this.issues = [];
    this.warnings = [];
    this.suggestions = [];
    this.fileStats = {
      totalFiles: 0,
      totalDirectories: 0,
      serviceFiles: 0,
      engineFiles: 0,
      routeFiles: 0,
      testFiles: 0
    };
  }

  async execute() {
    console.log('üîç ÂºÄÂßãBackendÁªìÊûÑÂàÜÊûê...');
    console.log('==================================================');

    try {
      // 1. ÂàÜÊûêÁõÆÂΩïÁªìÊûÑ
      await this.analyzeDirectoryStructure();
      
      // 2. ÂàÜÊûêservicesÁõÆÂΩï
      await this.analyzeServicesDirectory();
      
      // 3. ÂàÜÊûêenginesÁõÆÂΩï
      await this.analyzeEnginesDirectory();
      
      // 4. ÂàÜÊûêÊñá‰ª∂ÁªÑÁªá
      await this.analyzeFileOrganization();
      
      // 5. Ê£ÄÊü•ÈáçÂ§çÂíåÂÜó‰Ωô
      await this.checkDuplicatesAndRedundancy();
      
      // 6. ÁîüÊàêÂàÜÊûêÊä•Âëä
      await this.generateAnalysisReport();
      
    } catch (error) {
      console.error('‚ùå ÂàÜÊûêËøáÁ®ã‰∏≠Âá∫Áé∞ÈîôËØØ:', error.message);
      process.exit(1);
    }
  }

  async analyzeDirectoryStructure() {
    console.log('\nüìÅ ÂàÜÊûêBackendÁõÆÂΩïÁªìÊûÑ...');
    
    if (!fs.existsSync(this.backendRoot)) {
      this.issues.push('BackendÁõÆÂΩï‰∏çÂ≠òÂú®');
      return;
    }
    
    const rootItems = fs.readdirSync(this.backendRoot);
    console.log(`  üìä Ê†πÁõÆÂΩïÈ°πÁõÆÊï∞Èáè: ${rootItems.length}`);
    
    // Ê£ÄÊü•È¢ÑÊúüÁöÑÁõÆÂΩïÁªìÊûÑ
    const expectedDirs = {
      'api': 'APIË∑ØÁî±ÂíåÊñáÊ°£',
      'services': '‰∏öÂä°ÊúçÂä°Â±Ç',
      'engines': 'ÊµãËØïÂºïÊìé',
      'models': 'Êï∞ÊçÆÊ®°Âûã',
      'middleware': '‰∏≠Èó¥‰ª∂',
      'routes': 'Ë∑ØÁî±ÂÆö‰πâ',
      'utils': 'Â∑•ÂÖ∑ÂáΩÊï∞',
      'config': 'ÈÖçÁΩÆÊñá‰ª∂',
      '__tests__': 'ÊµãËØïÊñá‰ª∂'
    };
    
    const unexpectedDirs = ['data', 'reports', 'backups', 'scripts'];
    const unexpectedFiles = ['app.js', 'index.js'];
    
    // Ê£ÄÊü•È¢ÑÊúüÁõÆÂΩï
    for (const [dir, description] of Object.entries(expectedDirs)) {
      if (rootItems.includes(dir)) {
        console.log(`  ‚úÖ ${dir}/ - ${description}`);
      } else {
        this.warnings.push(`Áº∫Â∞ëÈ¢ÑÊúüÁõÆÂΩï: ${dir}/ (${description})`);
      }
    }
    
    // Ê£ÄÊü•‰∏çÂ∫îËØ•Âú®Ê†πÁõÆÂΩïÁöÑÈ°πÁõÆ
    for (const dir of unexpectedDirs) {
      if (rootItems.includes(dir)) {
        console.log(`  ‚ö†Ô∏è ${dir}/ Â∫îËØ•ÁßªÂä®Âà∞ÂÖ∂‰ªñ‰ΩçÁΩÆ`);
        this.warnings.push(`${dir}/ ÁõÆÂΩï‰ΩçÁΩÆ‰∏çÂΩìÔºåÂª∫ËÆÆÈáçÊñ∞ÁªÑÁªá`);
      }
    }
    
    for (const file of unexpectedFiles) {
      if (rootItems.includes(file)) {
        console.log(`  ‚ö†Ô∏è ${file} Â∫îËØ•ÁßªÂä®Âà∞src/Êàñbin/ÁõÆÂΩï`);
        this.warnings.push(`${file} Êñá‰ª∂‰ΩçÁΩÆ‰∏çÂΩìÔºåÂª∫ËÆÆÁßªÂä®`);
      }
    }
  }

  async analyzeServicesDirectory() {
    console.log('\nüîß ÂàÜÊûêServicesÁõÆÂΩï...');
    
    const servicesPath = path.join(this.backendRoot, 'services');
    if (!fs.existsSync(servicesPath)) {
      this.issues.push('servicesÁõÆÂΩï‰∏çÂ≠òÂú®');
      return;
    }
    
    const serviceItems = fs.readdirSync(servicesPath);
    const serviceFiles = serviceItems.filter(item => {
      const itemPath = path.join(servicesPath, item);
      return fs.statSync(itemPath).isFile() && item.endsWith('.js');
    });
    
    const serviceDirs = serviceItems.filter(item => {
      const itemPath = path.join(servicesPath, item);
      return fs.statSync(itemPath).isDirectory();
    });
    
    console.log(`  üìÑ ÊúçÂä°Êñá‰ª∂Êï∞Èáè: ${serviceFiles.length}`);
    console.log(`  üìÅ ÊúçÂä°Â≠êÁõÆÂΩïÊï∞Èáè: ${serviceDirs.length}`);
    
    this.fileStats.serviceFiles = serviceFiles.length;
    
    // ÂàÜÊûêÊúçÂä°Êñá‰ª∂ÂëΩÂêçÊ®°Âºè
    const namingPatterns = {
      engines: serviceFiles.filter(f => f.includes('Engine')),
      services: serviceFiles.filter(f => f.includes('Service')),
      managers: serviceFiles.filter(f => f.includes('Manager')),
      others: serviceFiles.filter(f => !f.includes('Engine') && !f.includes('Service') && !f.includes('Manager'))
    };
    
    console.log(`    üîß ÂºïÊìéÊñá‰ª∂: ${namingPatterns.engines.length}‰∏™`);
    console.log(`    üõ†Ô∏è ÊúçÂä°Êñá‰ª∂: ${namingPatterns.services.length}‰∏™`);
    console.log(`    üìã ÁÆ°ÁêÜÂô®Êñá‰ª∂: ${namingPatterns.managers.length}‰∏™`);
    console.log(`    ‚ùì ÂÖ∂‰ªñÊñá‰ª∂: ${namingPatterns.others.length}‰∏™`);
    
    // Ê£ÄÊü•ÊòØÂê¶ÊúâÈáçÂ§çÂäüËÉΩ
    if (namingPatterns.engines.length > 10) {
      this.warnings.push(`servicesÁõÆÂΩï‰∏≠Êúâ${namingPatterns.engines.length}‰∏™ÂºïÊìéÊñá‰ª∂ÔºåÂª∫ËÆÆÁßªÂä®Âà∞enginesÁõÆÂΩï`);
    }
    
    if (serviceFiles.length > 30) {
      this.warnings.push(`servicesÁõÆÂΩïÊñá‰ª∂ËøáÂ§ö (${serviceFiles.length}‰∏™)ÔºåÂª∫ËÆÆÊåâÂäüËÉΩÂàÜÁ±ª`);
    }
  }

  async analyzeEnginesDirectory() {
    console.log('\n‚öôÔ∏è ÂàÜÊûêEnginesÁõÆÂΩï...');
    
    const enginesPath = path.join(this.backendRoot, 'engines');
    if (!fs.existsSync(enginesPath)) {
      this.issues.push('enginesÁõÆÂΩï‰∏çÂ≠òÂú®');
      return;
    }
    
    const engineDirs = fs.readdirSync(enginesPath).filter(item => {
      const itemPath = path.join(enginesPath, item);
      return fs.statSync(itemPath).isDirectory();
    });
    
    console.log(`  üìÅ ÂºïÊìéÁ±ªÂûãÊï∞Èáè: ${engineDirs.length}`);
    console.log(`  üîß ÂºïÊìéÁ±ªÂûã: ${engineDirs.join(', ')}`);
    
    const expectedEngines = ['api', 'compatibility', 'performance', 'security', 'seo', 'stress'];
    
    for (const engine of expectedEngines) {
      if (engineDirs.includes(engine)) {
        console.log(`    ‚úÖ ${engine} ÂºïÊìéÂ≠òÂú®`);
      } else {
        this.warnings.push(`Áº∫Â∞ëÈ¢ÑÊúüÂºïÊìé: ${engine}`);
      }
    }
  }

  async analyzeFileOrganization() {
    console.log('\nüìã ÂàÜÊûêÊñá‰ª∂ÁªÑÁªá...');
    
    // ÁªüËÆ°ÂêÑÁ±ªÊñá‰ª∂Êï∞Èáè
    await this.countFiles(this.backendRoot);
    
    console.log(`  üìä Êñá‰ª∂ÁªüËÆ°:`);
    console.log(`    ÊÄªÊñá‰ª∂Êï∞: ${this.fileStats.totalFiles}`);
    console.log(`    ÊÄªÁõÆÂΩïÊï∞: ${this.fileStats.totalDirectories}`);
    console.log(`    ÊúçÂä°Êñá‰ª∂: ${this.fileStats.serviceFiles}`);
    console.log(`    Ë∑ØÁî±Êñá‰ª∂: ${this.fileStats.routeFiles}`);
    console.log(`    ÊµãËØïÊñá‰ª∂: ${this.fileStats.testFiles}`);
  }

  async countFiles(dirPath, level = 0) {
    if (level > 3) return; // ÈôêÂà∂ÈÄíÂΩíÊ∑±Â∫¶
    
    const items = fs.readdirSync(dirPath);
    
    for (const item of items) {
      if (item === 'node_modules') continue; // Ë∑≥Ëøánode_modules
      
      const itemPath = path.join(dirPath, item);
      const stat = fs.statSync(itemPath);
      
      if (stat.isDirectory()) {
        this.fileStats.totalDirectories++;
        await this.countFiles(itemPath, level + 1);
      } else {
        this.fileStats.totalFiles++;
        
        // ÂàÜÁ±ªÁªüËÆ°
        if (item.endsWith('.test.js') || item.endsWith('.spec.js')) {
          this.fileStats.testFiles++;
        } else if (dirPath.includes('routes')) {
          this.fileStats.routeFiles++;
        } else if (dirPath.includes('engines')) {
          this.fileStats.engineFiles++;
        }
      }
    }
  }

  async checkDuplicatesAndRedundancy() {
    console.log('\nüîç Ê£ÄÊü•ÈáçÂ§çÂíåÂÜó‰Ωô...');
    
    // Ê£ÄÊü•ÊòØÂê¶ÊúâÂäüËÉΩÈáçÂ§çÁöÑÊñá‰ª∂
    const duplicateChecks = [
      { pattern: /cache/i, files: [], description: 'ÁºìÂ≠òÁõ∏ÂÖ≥' },
      { pattern: /test.*engine/i, files: [], description: 'ÊµãËØïÂºïÊìé' },
      { pattern: /monitoring/i, files: [], description: 'ÁõëÊéßÁõ∏ÂÖ≥' }
    ];
    
    // Êâ´ÊèèÊâÄÊúâÊñá‰ª∂
    await this.scanForDuplicates(this.backendRoot, duplicateChecks);
    
    for (const check of duplicateChecks) {
      if (check.files.length > 3) {
        this.warnings.push(`${check.description}ÂäüËÉΩÂèØËÉΩÈáçÂ§ç: ÂèëÁé∞${check.files.length}‰∏™Áõ∏ÂÖ≥Êñá‰ª∂`);
        console.log(`  ‚ö†Ô∏è ${check.description}: ${check.files.length}‰∏™Êñá‰ª∂`);
      }
    }
  }

  async scanForDuplicates(dirPath, checks, level = 0) {
    if (level > 3 || dirPath.includes('node_modules')) return;
    
    const items = fs.readdirSync(dirPath);
    
    for (const item of items) {
      const itemPath = path.join(dirPath, item);
      const stat = fs.statSync(itemPath);
      
      if (stat.isDirectory()) {
        await this.scanForDuplicates(itemPath, checks, level + 1);
      } else if (item.endsWith('.js')) {
        for (const check of checks) {
          if (check.pattern.test(item)) {
            check.files.push(path.relative(this.backendRoot, itemPath));
          }
        }
      }
    }
  }

  async generateAnalysisReport() {
    console.log('\nüìä ÁîüÊàêBackendÂàÜÊûêÊä•Âëä...');
    
    const reportPath = path.join(this.projectRoot, 'docs/reports/BACKEND_STRUCTURE_ANALYSIS_REPORT.md');
    
    const report = `# BackendÁªìÊûÑÂàÜÊûêÊä•Âëä

**ÂàÜÊûêÊó∂Èó¥**: ${new Date().toISOString()}
**ÂàÜÊûêÁä∂ÊÄÅ**: ${this.issues.length === 0 ? '‚úÖ ËâØÂ•Ω' : '‚ö†Ô∏è ÈúÄË¶ÅÊîπËøõ'}

## üìä ÂàÜÊûêÊëòË¶Å

- **‰∏•ÈáçÈóÆÈ¢ò**: ${this.issues.length}‰∏™
- **Ë≠¶Âëä**: ${this.warnings.length}‰∏™
- **Âª∫ËÆÆ**: ${this.suggestions.length}‰∏™

## üìà Êñá‰ª∂ÁªüËÆ°

- **ÊÄªÊñá‰ª∂Êï∞**: ${this.fileStats.totalFiles}
- **ÊÄªÁõÆÂΩïÊï∞**: ${this.fileStats.totalDirectories}
- **ÊúçÂä°Êñá‰ª∂**: ${this.fileStats.serviceFiles}
- **Ë∑ØÁî±Êñá‰ª∂**: ${this.fileStats.routeFiles}
- **ÊµãËØïÊñá‰ª∂**: ${this.fileStats.testFiles}
- **ÂºïÊìéÊñá‰ª∂**: ${this.fileStats.engineFiles}

## üö® ‰∏•ÈáçÈóÆÈ¢ò (${this.issues.length}‰∏™)

${this.issues.length === 0 ? 'Êó†‰∏•ÈáçÈóÆÈ¢ò üéâ' : this.issues.map(issue => `- ‚ùå ${issue}`).join('\n')}

## ‚ö†Ô∏è Ë≠¶Âëä (${this.warnings.length}‰∏™)

${this.warnings.length === 0 ? 'Êó†Ë≠¶Âëä ‚úÖ' : this.warnings.map(warning => `- ‚ö†Ô∏è ${warning}`).join('\n')}

## üí° ‰ºòÂåñÂª∫ËÆÆ

### 1. ÁõÆÂΩïÁªìÊûÑ‰ºòÂåñ
- Â∞Üdata/ÁõÆÂΩïÁßªÂä®Âà∞È°πÁõÆÊ†πÁõÆÂΩï
- Â∞Üreports/ÁõÆÂΩïÁßªÂä®Âà∞docs/reports/
- Â∞Übackups/ÁõÆÂΩïÁßªÂä®Âà∞È°πÁõÆÊ†πÁõÆÂΩï
- Â∞Üapp.jsÁßªÂä®Âà∞src/ÁõÆÂΩï

### 2. Êñá‰ª∂ÁªÑÁªá‰ºòÂåñ
- ServicesÁõÆÂΩïÊåâÂäüËÉΩÂàÜÁ±ªÂà∞Â≠êÁõÆÂΩï
- Â∞Üservices‰∏≠ÁöÑÂºïÊìéÊñá‰ª∂ÁßªÂä®Âà∞enginesÁõÆÂΩï
- Â¢ûÂä†ÊµãËØïÊñá‰ª∂Ë¶ÜÁõñÁéá

### 3. ÂëΩÂêçËßÑËåÉ‰ºòÂåñ
- Áªü‰∏ÄÊúçÂä°Êñá‰ª∂ÂëΩÂêçËßÑËåÉ
- Âª∫Á´ãÊñá‰ª∂ÂëΩÂêçËßÑËåÉÊñáÊ°£

## üéØ BackendÂÅ•Â∫∑Â∫¶ËØÑÂàÜ

- **ÁõÆÂΩïÁªìÊûÑ**: ${this.calculateScore()}/5 ‚≠ê
- **Êñá‰ª∂ÁªÑÁªá**: ${this.calculateScore()}/5 ‚≠ê
- **ÂëΩÂêçËßÑËåÉ**: ${this.calculateScore()}/5 ‚≠ê
- **‰ª£Á†ÅÈáçÂ§ç**: ${this.calculateScore()}/5 ‚≠ê

**ÊÄª‰ΩìËØÑÂàÜ**: ${this.calculateScore()}/5 ‚≠ê

---
*Ê≠§Êä•ÂëäÁî±BackendÁªìÊûÑÂàÜÊûêÂ∑•ÂÖ∑Ëá™Âä®ÁîüÊàê*
`;

    fs.writeFileSync(reportPath, report, 'utf8');
    console.log(`  üìÑ BackendÂàÜÊûêÊä•ÂëäÂ∑≤ÁîüÊàê: ${reportPath}`);
    
    // ËæìÂá∫ÊëòË¶Å
    console.log('\nüìä BackendÂàÜÊûêÁªìÊûúÊëòË¶Å:');
    console.log(`- ‰∏•ÈáçÈóÆÈ¢ò: ${this.issues.length}`);
    console.log(`- Ë≠¶Âëä: ${this.warnings.length}`);
    console.log(`- ÊÄª‰ΩìËØÑÂàÜ: ${this.calculateScore()}/5`);
    
    if (this.issues.length === 0 && this.warnings.length <= 3) {
      console.log('\nüéâ BackendÁªìÊûÑÂàÜÊûêÈÄöËøáÔºÅÁªìÊûÑÂêàÁêÜÔºåÁªÑÁªáËâØÂ•ΩÔºÅ');
    } else {
      console.log(`\n‚ö†Ô∏è ÂèëÁé∞ ${this.issues.length + this.warnings.length} ‰∏™ÈóÆÈ¢òÔºåÂª∫ËÆÆËøõË°å‰ºòÂåñ„ÄÇ`);
    }
  }

  calculateScore() {
    let score = 5;
    if (this.issues.length > 0) score -= 2;
    if (this.warnings.length > 5) score -= 1;
    if (this.warnings.length > 10) score -= 1;
    return Math.max(1, score);
  }
}

// ÊâßË°åÂàÜÊûê
if (require.main === module) {
  const analyzer = new BackendStructureAnalyzer();
  analyzer.execute().catch(console.error);
}

module.exports = BackendStructureAnalyzer;
