#!/usr/bin/env node

/**
 * ‰øÆÂ§çËøõÂ∫¶Ë∑üË∏™Âô®
 * ÂÆûÊó∂ÁõëÊéß‰øÆÂ§çËøõÂ∫¶ÂíåË¥®ÈáèÊåáÊ†á
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

class ProgressTracker {
  constructor() {
    this.metrics = {
      totalErrors: 14044,
      currentErrors: 0,
      fixedFiles: 0,
      totalFiles: 452,
      testCoverage: 0,
      buildTime: 0,
      phases: {
        phase1: { status: 'not_started', progress: 0 },
        phase2: { status: 'not_started', progress: 0 },
        phase3: { status: 'not_started', progress: 0 },
        phase4: { status: 'not_started', progress: 0 },
        phase5: { status: 'not_started', progress: 0 },
        phase6: { status: 'not_started', progress: 0 }
      }
    };
  }

  async updateMetrics() {
    console.log('üìä Êõ¥Êñ∞È°πÁõÆÊåáÊ†á...\n');
    
    // Ëé∑ÂèñÂΩìÂâçTypeScriptÈîôËØØÊï∞
    await this.getCurrentErrors();
    
    // Ëé∑Âèñ‰øÆÂ§çÁöÑÊñá‰ª∂Êï∞
    await this.getFixedFiles();
    
    // Ëé∑ÂèñÊûÑÂª∫Êó∂Èó¥
    await this.getBuildTime();
    
    // Êõ¥Êñ∞Èò∂ÊÆµËøõÂ∫¶
    await this.updatePhaseProgress();
    
    this.displayDashboard();
    this.saveMetrics();
  }

  async getCurrentErrors() {
    try {
      const result = execSync('npx tsc --noEmit --maxNodeModuleJsDepth 0', {
        cwd: path.join(process.cwd(), 'frontend'),
        encoding: 'utf8',
        stdio: 'pipe'
      });
      this.metrics.currentErrors = 0;
    } catch (error) {
      const output = error.stdout || error.stderr || '';
      const errorCount = (output.match(/error TS/g) || []).length;
      this.metrics.currentErrors = errorCount;
    }
  }

  async getFixedFiles() {
    // ÁªüËÆ°Ê≤°ÊúâÈîôËØØÁöÑÊñá‰ª∂Êï∞
    this.metrics.fixedFiles = this.metrics.totalFiles - this.getFilesWithErrors();
  }

  getFilesWithErrors() {
    try {
      const result = execSync('npx tsc --noEmit --maxNodeModuleJsDepth 0', {
        cwd: path.join(process.cwd(), 'frontend'),
        encoding: 'utf8',
        stdio: 'pipe'
      });
      return 0;
    } catch (error) {
      const output = error.stdout || error.stderr || '';
      const lines = output.split('\n');
      const fileSet = new Set();
      
      lines.forEach(line => {
        const match = line.match(/^(.+?)\(\d+,\d+\): error/);
        if (match) {
          fileSet.add(match[1]);
        }
      });
      
      return fileSet.size;
    }
  }

  async getBuildTime() {
    const startTime = Date.now();
    try {
      execSync('npm run build', {
        cwd: path.join(process.cwd(), 'frontend'),
        stdio: 'pipe'
      });
      this.metrics.buildTime = (Date.now() - startTime) / 1000;
    } catch (error) {
      this.metrics.buildTime = -1; // ÊûÑÂª∫Â§±Ë¥•
    }
  }

  async updatePhaseProgress() {
    // Ê£ÄÊü•ÂêÑÈò∂ÊÆµÁöÑÂÆåÊàêÊÉÖÂÜµ
    const reports = [
      'reports/phase1-repair-report.json',
      'reports/phase2-repair-report.json',
      'reports/phase3-repair-report.json',
      'reports/phase4-repair-report.json',
      'reports/phase5-repair-report.json',
      'reports/phase6-repair-report.json'
    ];

    reports.forEach((reportPath, index) => {
      const phaseKey = `phase${index + 1}`;
      if (fs.existsSync(reportPath)) {
        const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
        this.metrics.phases[phaseKey].status = 'completed';
        this.metrics.phases[phaseKey].progress = 100;
      }
    });

    // Âü∫‰∫éÈîôËØØÊï∞‰º∞ÁÆóÂΩìÂâçËøõÂ∫¶
    const errorReduction = (this.metrics.totalErrors - this.metrics.currentErrors) / this.metrics.totalErrors;
    const overallProgress = Math.round(errorReduction * 100);

    if (overallProgress > 0 && this.metrics.phases.phase1.status === 'not_started') {
      this.metrics.phases.phase1.status = 'in_progress';
      this.metrics.phases.phase1.progress = Math.min(overallProgress * 2, 100);
    }
  }

  displayDashboard() {
    console.clear();
    console.log('üéØ Test-WebÈ°πÁõÆ‰øÆÂ§çËøõÂ∫¶‰ª™Ë°®Êùø');
    console.log('='.repeat(60));
    
    // ÊÄª‰ΩìËøõÂ∫¶
    const overallProgress = Math.round(
      ((this.metrics.totalErrors - this.metrics.currentErrors) / this.metrics.totalErrors) * 100
    );
    
    console.log(`\nüìä ÊÄª‰ΩìËøõÂ∫¶: ${overallProgress}%`);
    console.log(this.createProgressBar(overallProgress));
    
    // ÂÖ≥ÈîÆÊåáÊ†á
    console.log('\nüìà ÂÖ≥ÈîÆÊåáÊ†á:');
    console.log(`  TypeScriptÈîôËØØ: ${this.metrics.currentErrors.toLocaleString()} / ${this.metrics.totalErrors.toLocaleString()}`);
    console.log(`  ‰øÆÂ§çÊñá‰ª∂: ${this.metrics.fixedFiles} / ${this.metrics.totalFiles}`);
    console.log(`  ÊûÑÂª∫Êó∂Èó¥: ${this.metrics.buildTime === -1 ? 'ÊûÑÂª∫Â§±Ë¥•' : this.metrics.buildTime + 's'}`);
    
    // Èò∂ÊÆµËøõÂ∫¶
    console.log('\nüéØ Èò∂ÊÆµËøõÂ∫¶:');
    Object.entries(this.metrics.phases).forEach(([phase, data]) => {
      const statusIcon = this.getStatusIcon(data.status);
      const progressBar = this.createProgressBar(data.progress, 20);
      console.log(`  ${statusIcon} ${phase}: ${progressBar} ${data.progress}%`);
    });
    
    // Ë¥®ÈáèÊåáÊ†á
    console.log('\nüèÜ Ë¥®ÈáèÁõÆÊ†á:');
    console.log(`  ‚úÖ TypeScriptÈîôËØØ: ${this.metrics.currentErrors === 0 ? 'ËææÊ†á' : 'Êú™ËææÊ†á'}`);
    console.log(`  ${this.metrics.buildTime > 0 && this.metrics.buildTime < 120 ? '‚úÖ' : '‚ùå'} ÊûÑÂª∫Êó∂Èó¥: ${this.metrics.buildTime === -1 ? 'Â§±Ë¥•' : (this.metrics.buildTime < 120 ? 'ËææÊ†á' : 'Ë∂ÖÊó∂')}`);
    
    // ‰∏ã‰∏ÄÊ≠•Âª∫ËÆÆ
    console.log('\nüéØ ‰∏ã‰∏ÄÊ≠•Âª∫ËÆÆ:');
    if (this.metrics.currentErrors > 10000) {
      console.log('  üîß ÁªßÁª≠‰øÆÂ§çÂü∫Á°ÄËØ≠Ê≥ïÈîôËØØ');
    } else if (this.metrics.currentErrors > 1000) {
      console.log('  üèóÔ∏è ÂºÄÂßãÈáçÂª∫ÊúçÂä°Â±Ç');
    } else if (this.metrics.currentErrors > 100) {
      console.log('  üé® ‰øÆÂ§çUIÁªÑ‰ª∂');
    } else if (this.metrics.currentErrors > 0) {
      console.log('  ‚ú® ÂÆåÂñÑÁªÜËäÇÂíå‰ºòÂåñ');
    } else {
      console.log('  üéâ È°πÁõÆ‰øÆÂ§çÂÆåÊàêÔºÅ');
    }
    
    console.log(`\n‚è∞ ÊúÄÂêéÊõ¥Êñ∞: ${new Date().toLocaleString()}`);
  }

  createProgressBar(percentage, length = 30) {
    const filled = Math.round((percentage / 100) * length);
    const empty = length - filled;
    return `[${'‚ñà'.repeat(filled)}${' '.repeat(empty)}]`;
  }

  getStatusIcon(status) {
    switch (status) {
      case 'completed': return '‚úÖ';
      case 'in_progress': return 'üîÑ';
      case 'not_started': return '‚è≥';
      default: return '‚ùì';
    }
  }

  saveMetrics() {
    const metricsPath = 'reports/progress-metrics.json';
    fs.mkdirSync(path.dirname(metricsPath), { recursive: true });
    
    const data = {
      ...this.metrics,
      timestamp: new Date().toISOString(),
      overallProgress: Math.round(
        ((this.metrics.totalErrors - this.metrics.currentErrors) / this.metrics.totalErrors) * 100
      )
    };
    
    fs.writeFileSync(metricsPath, JSON.stringify(data, null, 2));
  }

  async startMonitoring(intervalSeconds = 30) {
    console.log(`üîÑ ÂºÄÂßãÁõëÊéßÔºåÊØè${intervalSeconds}ÁßíÊõ¥Êñ∞‰∏ÄÊ¨°...\n`);
    
    // Á´ãÂç≥Êõ¥Êñ∞‰∏ÄÊ¨°
    await this.updateMetrics();
    
    // ËÆæÁΩÆÂÆöÊó∂Êõ¥Êñ∞
    setInterval(async () => {
      await this.updateMetrics();
    }, intervalSeconds * 1000);
  }
}

// ÂëΩ‰ª§Ë°åÊé•Âè£
if (require.main === module) {
  const tracker = new ProgressTracker();
  
  const args = process.argv.slice(2);
  if (args.includes('--monitor')) {
    const interval = parseInt(args[args.indexOf('--monitor') + 1]) || 30;
    tracker.startMonitoring(interval);
  } else {
    tracker.updateMetrics();
  }
}

module.exports = ProgressTracker;
