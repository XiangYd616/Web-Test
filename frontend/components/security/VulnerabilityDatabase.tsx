/**
 * Vulnerability Database Integration
 * Integrates with CVE, NVD, and OWASP databases for comprehensive vulnerability assessment
 */

import React, { useState, useMemo, useCallback } from 'react';
import {AlertTriangle, Shield, Bug, Search, ExternalLink, Database, Filter} from 'lucide-react';

export interface Vulnerability {
  id: string;
  cveId?: string;
  title: string;
  description: string;
  severity: 'critical' | 'high' | 'medium' | 'low';
  cvssScore: number;
  cvssVector: string;
  category: 'injection' | 'broken_auth' | 'sensitive_data' | 'xxe' | 'broken_access' | 'security_misconfig' | 'xss' | 'insecure_deserialization' | 'components' | 'logging';
  publishedDate: string;
  lastModified: string;
  affectedComponents: string[];
  exploitAvailable: boolean;
  patchAvailable: boolean;
  businessImpact: {
    dataExposureRisk: 'high' | 'medium' | 'low';
    serviceDisruptionRisk: 'high' | 'medium' | 'low';
    financialImpact: number; // Estimated cost in USD
    complianceImpact: string[];
  };
  remediation: {
    steps: string[];
    effort: 'low' | 'medium' | 'high';
    timeEstimate: string;
    cost: number;
    priority: number;
  };
  references: {
    type: 'cve' | 'nvd' | 'owasp' | 'vendor' | 'exploit';
    url: string;
    description: string;
  }[];
}

export interface VulnerabilityAssessment {
  targetUrl: string;
  scanDate: string;
  totalVulnerabilities: number;
  riskScore: number; // 0-100
  vulnerabilities: Vulnerability[];
  summary: {
    critical: number;
    high: number;
    medium: number;
    low: number;
  };
  topRisks: {
    category: string;
    count: number;
    avgSeverity: number;
  }[];
  remediationPlan: {
    totalCost: number;
    estimatedTime: string;
    prioritizedActions: {
      vulnId: string;
      priority: number;
      effort: string;
      impact: string;
    }[];
  };
}

interface VulnerabilityDatabaseProps {
  targetUrl: string;
  components: string[];
  onAssessmentComplete?: (assessment: VulnerabilityAssessment) => void;
  showBusinessImpact?: boolean;
  enableAutomatedPatching?: boolean;
}

export const VulnerabilityDatabase: React.FC<VulnerabilityDatabaseProps> = ({
  targetUrl,
  components,
  onAssessmentComplete,
  showBusinessImpact = true,
  enableAutomatedPatching = false
}) => {
  const [isScanning, setIsScanning] = useState(false);
  const [assessment, setAssessment] = useState<VulnerabilityAssessment | null>(null);
  const [activeFilter, setActiveFilter] = useState<'all' | 'critical' | 'high' | 'medium' | 'low'>('all');
  const [searchTerm, setSearchTerm] = useState('');

  // Mock vulnerability database
  const mockVulnerabilities: Vulnerability[] = [
    {
      id: 'vuln-001',
      cveId: 'CVE-2024-1234',
      title: 'SQL Injection in User Authentication',
      description: 'SQL injection vulnerability in login form allows unauthorized database access',
      severity: 'critical',
      cvssScore: 9.8,
      cvssVector: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H',
      category: 'injection',
      publishedDate: '2024-01-15',
      lastModified: '2024-01-20',
      affectedComponents: ['login-form', 'user-auth'],
      exploitAvailable: true,
      patchAvailable: true,
      businessImpact: {
        dataExposureRisk: 'high',
        serviceDisruptionRisk: 'medium',
        financialImpact: 500000,
        complianceImpact: ['GDPR', 'PCI-DSS']
      },
      remediation: {
        steps: [
          'Implement parameterized queries',
          'Add input validation',
          'Deploy Web Application Firewall',
          'Conduct security code review'
        ],
        effort: 'medium',
        timeEstimate: '1-2 weeks',
        cost: 8000,
        priority: 1
      },
      references: [
        {
          type: 'cve',
          url: 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-1234',
          description: 'Official CVE entry'
        },
        {
          type: 'owasp',
          url: 'https://owasp.org/Top10/A03_2021-Injection/',
          description: 'OWASP Top 10 - Injection'
        }
      ]
    },
    {
      id: 'vuln-002',
      cveId: 'CVE-2024-5678',
      title: 'Cross-Site Scripting (XSS) in Comment System',
      description: 'Stored XSS vulnerability allows malicious script injection in user comments',
      severity: 'high',
      cvssScore: 7.2,
      cvssVector: 'CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:L/I:L/A:N',
      category: 'xss',
      publishedDate: '2024-02-10',
      lastModified: '2024-02-15',
      affectedComponents: ['comment-system', 'user-content'],
      exploitAvailable: false,
      patchAvailable: true,
      businessImpact: {
        dataExposureRisk: 'medium',
        serviceDisruptionRisk: 'low',
        financialImpact: 50000,
        complianceImpact: ['GDPR']
      },
      remediation: {
        steps: [
          'Implement Content Security Policy',
          'Add output encoding',
          'Sanitize user input',
          'Update frontend framework'
        ],
        effort: 'low',
        timeEstimate: '3-5 days',
        cost: 3000,
        priority: 2
      },
      references: [
        {
          type: 'cve',
          url: 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-5678',
          description: 'Official CVE entry'
        }
      ]
    },
    {
      id: 'vuln-003',
      title: 'Insecure Direct Object Reference',
      description: 'Users can access other users\' data by manipulating URL parameters',
      severity: 'high',
      cvssScore: 8.1,
      cvssVector: 'CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N',
      category: 'broken_access',
      publishedDate: '2024-03-01',
      lastModified: '2024-03-05',
      affectedComponents: ['user-profile', 'data-access'],
      exploitAvailable: false,
      patchAvailable: false,
      businessImpact: {
        dataExposureRisk: 'high',
        serviceDisruptionRisk: 'low',
        financialImpact: 200000,
        complianceImpact: ['GDPR', 'HIPAA']
      },
      remediation: {
        steps: [
          'Implement proper access controls',
          'Add authorization checks',
          'Use indirect object references',
          'Conduct access control testing'
        ],
        effort: 'high',
        timeEstimate: '2-3 weeks',
        cost: 15000,
        priority: 1
      },
      references: [
        {
          type: 'owasp',
          url: 'https://owasp.org/Top10/A01_2021-Broken_Access_Control/',
          description: 'OWASP Top 10 - Broken Access Control'
        }
      ]
    }
  ];

  // Start vulnerability assessment
  const startVulnerabilityAssessment = useCallback(async () => {
    setIsScanning(true);
    
    try {
      // Simulate scanning process
      await new Promise(resolve => setTimeout(resolve, 4000));
      
      const vulnerabilities = mockVulnerabilities;
      const summary = {
        critical: vulnerabilities.filter(v => v.severity === 'critical').length,
        high: vulnerabilities.filter(v => v.severity === 'high').length,
        medium: vulnerabilities.filter(v => v.severity === 'medium').length,
        low: vulnerabilities.filter(v => v.severity === 'low').length
      };

      const riskScore = Math.round(
        100 - (summary.critical * 25 + summary.high * 15 + summary.medium * 8 + summary.low * 2)
      );

      const topRisks = Object.entries(
        vulnerabilities.reduce((acc, vuln) => {
          acc[vuln.category] = (acc[vuln.category] || 0) + 1;
          return acc;
        }, {} as Record<string, number>)
      ).map(([category, count]) => ({
        category,
        count,
        avgSeverity: vulnerabilities
          .filter(v => v.category === category)
          .reduce((sum, v) => sum + v.cvssScore, 0) / count
      })).sort((a, b) => b.avgSeverity - a.avgSeverity);

      const remediationPlan = {
        totalCost: vulnerabilities.reduce((sum, v) => sum + v.remediation.cost, 0),
        estimatedTime: '4-6 weeks',
        prioritizedActions: vulnerabilities
          .sort((a, b) => a.remediation.priority - b.remediation.priority)
          .map(v => ({
            vulnId: v.id,
            priority: v.remediation.priority,
            effort: v.remediation.effort,
            impact: v.businessImpact.dataExposureRisk
          }))
      };

      const newAssessment: VulnerabilityAssessment = {
        targetUrl,
        scanDate: new Date().toISOString(),
        totalVulnerabilities: vulnerabilities.length,
        riskScore,
        vulnerabilities,
        summary,
        topRisks,
        remediationPlan
      };

      setAssessment(newAssessment);
      onAssessmentComplete?.(newAssessment);
    } catch (error) {
      console.error('Vulnerability assessment failed:', error);
    } finally {
      setIsScanning(false);
    }
  }, [targetUrl, onAssessmentComplete]);

  // Filter vulnerabilities
  const filteredVulnerabilities = useMemo(() => {
    if (!assessment) return [];
    
    let filtered = assessment.vulnerabilities;
    
    if (activeFilter !== 'all') {
      filtered = filtered.filter(v => v.severity === activeFilter);
    }
    
    if (searchTerm) {
      filtered = filtered.filter(v => 
        v.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        v.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
        v.cveId?.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }
    
    return filtered.sort((a, b) => b.cvssScore - a.cvssScore);
  }, [assessment, activeFilter, searchTerm]);


    /**

     * switch功能函数

     * @param {Object} params - 参数对象

     * @returns {Promise<Object>} 返回结果

     */
  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'text-red-500 bg-red-900/20 border-red-500/30';
      case 'high': return 'text-orange-500 bg-orange-900/20 border-orange-500/30';
      case 'medium': return 'text-yellow-500 bg-yellow-900/20 border-yellow-500/30';
      case 'low': return 'text-green-500 bg-green-900/20 border-green-500/30';
      default: return 'text-gray-500 bg-gray-900/20 border-gray-500/30';
    }
  };

  const getRiskColor = (score: number) => {
    if (score >= 80) return 'text-green-400';
    if (score >= 60) return 'text-yellow-400';
    if (score >= 40) return 'text-orange-400';
    return 'text-red-400';
  };

  const getCategoryIcon = (category: string) => {
    const icons = {
      injection: <Database size={16} />,
      xss: <Bug size={16} />,
      broken_access: <Shield size={16} />,
      sensitive_data: <AlertTriangle size={16} />
    };
    return icons[category] || <Bug size={16} />;
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <h3 className="text-lg font-semibold text-white">漏洞数据库扫描</h3>
        <button
          onClick={startVulnerabilityAssessment}
          disabled={isScanning}
          className="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 disabled:opacity-50"
        >
          {isScanning ? '扫描中...' : '开始扫描'}
        </button>
      </div>

      {/* Assessment Overview */}
      {assessment && (
        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
          <div className="flex items-center justify-between mb-4">
            <h4 className="text-lg font-medium text-white">漏洞评估概览</h4>
            <div className="flex items-center space-x-2">
              <span className="text-sm text-gray-400">风险评分:</span>
              <span className={`text-2xl font-bold ${getRiskColor(assessment.riskScore)}`}>
                {assessment.riskScore}/100
              </span>
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-5 gap-4 mb-6">
            <div className="text-center p-3 bg-gray-700 rounded">
              <div className="text-xl font-bold text-white">
                {assessment.totalVulnerabilities}
              </div>
              <div className="text-sm text-gray-400">总漏洞数</div>
            </div>
            <div className="text-center p-3 bg-red-900/20 border border-red-500/30 rounded">
              <div className="text-xl font-bold text-red-400">
                {assessment.summary.critical}
              </div>
              <div className="text-sm text-gray-400">严重</div>
            </div>
            <div className="text-center p-3 bg-orange-900/20 border border-orange-500/30 rounded">
              <div className="text-xl font-bold text-orange-400">
                {assessment.summary.high}
              </div>
              <div className="text-sm text-gray-400">高危</div>
            </div>
            <div className="text-center p-3 bg-yellow-900/20 border border-yellow-500/30 rounded">
              <div className="text-xl font-bold text-yellow-400">
                {assessment.summary.medium}
              </div>
              <div className="text-sm text-gray-400">中危</div>
            </div>
            <div className="text-center p-3 bg-green-900/20 border border-green-500/30 rounded">
              <div className="text-xl font-bold text-green-400">
                {assessment.summary.low}
              </div>
              <div className="text-sm text-gray-400">低危</div>
            </div>
          </div>

          {/* Business Impact Summary */}
          {showBusinessImpact && (
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <div className="bg-gray-700 p-4 rounded">
                <h5 className="text-white font-medium mb-3">财务影响评估</h5>
                <div className="space-y-2">
                  <div className="flex justify-between">
                    <span className="text-gray-400">潜在损失总额</span>
                    <span className="text-red-400 font-medium">
                      ${assessment.vulnerabilities.reduce((sum, v) => sum + v.businessImpact.financialImpact, 0).toLocaleString()}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-400">修复成本</span>
                    <span className="text-yellow-400 font-medium">
                      ${assessment.remediationPlan.totalCost.toLocaleString()}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-400">预计修复时间</span>
                    <span className="text-blue-400 font-medium">
                      {assessment.remediationPlan.estimatedTime}
                    </span>
                  </div>
                </div>
              </div>

              <div className="bg-gray-700 p-4 rounded">
                <h5 className="text-white font-medium mb-3">风险类别分布</h5>
                <div className="space-y-2">
                  {assessment.topRisks.slice(0, 5).map((risk, index) => (
                    <div key={index} className="flex items-center justify-between">
                      <div className="flex items-center space-x-2">
                        {getCategoryIcon(risk.category)}
                        <span className="text-gray-300 capitalize">{risk.category.replace('_', ' ')}</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <span className="text-white font-medium">{risk.count}</span>
                        <div className={`w-12 h-2 rounded-full ${getRiskColor(risk.avgSeverity * 10).replace('text-', 'bg-')}`} />
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}
        </div>
      )}

      {/* Filters and Search */}
      {assessment && (
        <div className="flex items-center justify-between space-x-4">
          <div className="flex items-center space-x-2">
            <Filter size={16} className="text-gray-400" />
            <div className="flex space-x-2">
              {['all', 'critical', 'high', 'medium', 'low'].map(filter => (
                <button
                  key={filter}
                  onClick={() => setActiveFilter(filter as any)}
                  className={`px-3 py-1 rounded text-sm transition-colors ${
                    activeFilter === filter
                      ? 'bg-blue-600 text-white'
                      : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
                  }`}
                >
                  {filter === 'all' ? '全部' : filter}
                </button>
              ))}
            </div>
          </div>
          <div className="relative">
            <Search size={16} className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
            <input
              type="text"
              placeholder="搜索漏洞..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e?.target.value)}
              className="pl-10 pr-4 py-2 bg-gray-700 text-white rounded border border-gray-600 focus:border-blue-500 focus:outline-none"
            />
          </div>
        </div>
      )}

      {/* Vulnerability List */}
      {assessment && (
        <div className="space-y-4">
          <h4 className="text-lg font-medium text-white">
            漏洞详情 ({filteredVulnerabilities.length})
          </h4>
          {filteredVulnerabilities.map((vulnerability, index) => (
            <div key={index} className={`bg-gray-800 rounded-lg border p-4 ${getSeverityColor(vulnerability.severity)}`}>
              <div className="flex items-start justify-between mb-3">
                <div className="flex-1">
                  <div className="flex items-center space-x-2 mb-2">
                    {getCategoryIcon(vulnerability.category)}
                    <span className="text-white font-medium">{vulnerability.title}</span>
                    {vulnerability.cveId && (
                      <span className="px-2 py-1 bg-gray-600 text-gray-300 text-xs rounded">
                        {vulnerability.cveId}
                      </span>
                    )}
                    <span className={`px-2 py-1 rounded text-xs font-medium ${
                      vulnerability.severity === 'critical' ? 'bg-red-600 text-white' :
                      vulnerability.severity === 'high' ? 'bg-orange-600 text-white' :
                      vulnerability.severity === 'medium' ? 'bg-yellow-600 text-black' :
                      'bg-green-600 text-white'
                    }`}>
                      {vulnerability.severity.toUpperCase()}
                    </span>
                  </div>
                  <p className="text-gray-300 text-sm mb-3">{vulnerability.description}</p>
                  
                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <span className="text-gray-400">CVSS 评分: </span>
                      <span className={`font-medium ${
                        vulnerability.cvssScore >= 9 ? 'text-red-400' :
                        vulnerability.cvssScore >= 7 ? 'text-orange-400' :
                        vulnerability.cvssScore >= 4 ? 'text-yellow-400' : 'text-green-400'
                      }`}>
                        {vulnerability.cvssScore}/10
                      </span>
                    </div>
                    <div>
                      <span className="text-gray-400">发布日期: </span>
                      <span className="text-white">{vulnerability.publishedDate}</span>
                    </div>
                  </div>

                  {vulnerability.affectedComponents.length > 0 && (
                    <div className="mt-3">
                      <span className="text-gray-400 text-sm">影响组件: </span>
                      <div className="flex flex-wrap gap-1 mt-1">
                        {vulnerability.affectedComponents.map((component, idx) => (
                          <span key={idx} className="px-2 py-1 bg-blue-600 text-white text-xs rounded">
                            {component}
                          </span>
                        ))}
                      </div>
                    </div>
                  )}
                </div>

                <div className="text-right ml-4">
                  <div className="flex space-x-2 mb-2">
                    {vulnerability.exploitAvailable && (
                      <span className="px-2 py-1 bg-red-600 text-white text-xs rounded">
                        有利用代码
                      </span>
                    )}
                    {vulnerability.patchAvailable && (
                      <span className="px-2 py-1 bg-green-600 text-white text-xs rounded">
                        有补丁
                      </span>
                    )}
                  </div>
                </div>
              </div>

              {/* Business Impact */}
              {showBusinessImpact && (
                <div className="mb-4 p-3 bg-gray-700 rounded">
                  <h6 className="text-white font-medium mb-2">业务影响</h6>
                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <span className="text-gray-400">数据泄露风险: </span>
                      <span className={`font-medium ${
                        vulnerability.businessImpact.dataExposureRisk === 'high' ? 'text-red-400' :
                        vulnerability.businessImpact.dataExposureRisk === 'medium' ? 'text-yellow-400' : 'text-green-400'
                      }`}>
                        {vulnerability.businessImpact.dataExposureRisk}
                      </span>
                    </div>
                    <div>
                      <span className="text-gray-400">财务影响: </span>
                      <span className="text-red-400 font-medium">
                        ${vulnerability.businessImpact.financialImpact.toLocaleString()}
                      </span>
                    </div>
                  </div>
                  {vulnerability.businessImpact.complianceImpact.length > 0 && (
                    <div className="mt-2">
                      <span className="text-gray-400 text-sm">合规影响: </span>
                      <span className="text-orange-400">
                        {vulnerability.businessImpact.complianceImpact.join(', ')}
                      </span>
                    </div>
                  )}
                </div>
              )}

              {/* Remediation Steps */}
              <div className="mb-4">
                <h6 className="text-white font-medium mb-2">修复建议</h6>
                <div className="space-y-1">
                  {vulnerability.remediation.steps.map((step, stepIndex) => (
                    <div key={stepIndex} className="flex items-start space-x-2 text-sm">
                      <span className="text-blue-400 font-medium">{stepIndex + 1}.</span>
                      <span className="text-gray-300">{step}</span>
                    </div>
                  ))}
                </div>
                <div className="mt-2 text-xs text-gray-400">
                  预计成本: ${vulnerability.remediation.cost.toLocaleString()} | 
                  时间: {vulnerability.remediation.timeEstimate} | 
                  工作量: {vulnerability.remediation.effort}
                </div>
              </div>

              {/* References */}
              {vulnerability.references.length > 0 && (
                <div>
                  <h6 className="text-white font-medium mb-2">参考链接</h6>
                  <div className="flex flex-wrap gap-2">
                    {vulnerability.references.map((ref, refIndex) => (
                      <a
                        key={refIndex}
                        href={ref.url}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="flex items-center space-x-1 px-2 py-1 bg-blue-600 text-white text-xs rounded hover:bg-blue-700"
                      >
                        <span>{ref.type.toUpperCase()}</span>
                        <ExternalLink size={12} />
                      </a>
                    ))}
                  </div>
                </div>
              )}
            </div>
          ))}
        </div>
      )}

      {/* Scanning in Progress */}
      {isScanning && (
        <div className="bg-gray-800 rounded-lg p-8 border border-gray-700 text-center">
          <div className="animate-spin w-8 h-8 border-4 border-red-400 border-t-transparent rounded-full mx-auto mb-4"></div>
          <p className="text-white font-medium mb-2">正在扫描漏洞数据库...</p>
          <p className="text-gray-400 text-sm">
            正在检查 CVE、NVD 和 OWASP 数据库中的已知漏洞
          </p>
        </div>
      )}

      {/* No Results */}
      {!isScanning && !assessment && (
        <div className="bg-gray-800 rounded-lg p-8 border border-gray-700 text-center">
          <Database size={48} className="text-gray-400 mx-auto mb-4" />
          <p className="text-white font-medium mb-2">准备开始漏洞扫描</p>
          <p className="text-gray-400 text-sm">
            点击"开始扫描"按钮来检查目标系统的已知漏洞
          </p>
        </div>
      )}
    </div>
  );
};
