import { describe, it, expect, vi } from 'vitest';
/**
 * InputÁªÑ‰ª∂ÂçïÂÖÉÊµãËØï
 */

import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { useState } from 'react';
import type { ReactElement } from 'react';;
import { ThemeProvider } from '../../../contexts/ThemeContext';
import { Input, NumberInput, PasswordInput, SearchInput, Select, Textarea } from '../Input';

// ÊµãËØïÂ∑•ÂÖ∑ÂáΩÊï∞
const renderWithTheme = (component: React.ReactElement) => {
  const [error, setError] = useState<string | null>(null);

    return render(
        <ThemeProvider>
            {component}
        </ThemeProvider>
    );
};

describe('InputÁªÑ‰ª∂', () => {
    describe('Âü∫Á°ÄÂäüËÉΩ', () => {
        it('Â∫îËØ•Ê≠£Á°ÆÊ∏≤ÊüìËæìÂÖ•Ê°Ü', () => {
            renderWithTheme(<Input placeholder="ËØ∑ËæìÂÖ•ÂÜÖÂÆπ" />);
            expect(screen.getByPlaceholderText('ËØ∑ËæìÂÖ•ÂÜÖÂÆπ')).toBeInTheDocument();
        });

        it('Â∫îËØ•ÊîØÊåÅÂèóÊéßËæìÂÖ•', async () => {
            const handleChange = vi.fn();
            renderWithTheme(<Input value="ÊµãËØïÂÄº" onChange={handleChange} />);

            const input = screen.getByDisplayValue('ÊµãËØïÂÄº');
            await userEvent.clear(input);
            await userEvent.type(input, 'Êñ∞ÂÄº');

            expect(handleChange).toHaveBeenCalled();
        });

        it('Â∫îËØ•ÊîØÊåÅÈùûÂèóÊéßËæìÂÖ•', async () => {
            renderWithTheme(<Input defaultValue="ÈªòËÆ§ÂÄº" />);

            const input = screen.getByDisplayValue('ÈªòËÆ§ÂÄº');
            await userEvent.clear(input);
            await userEvent.type(input, 'Êñ∞ÂÄº');

            expect(input).toHaveValue('Êñ∞ÂÄº');
        });

        it('Â∫îËØ•ÊîØÊåÅÁ¶ÅÁî®Áä∂ÊÄÅ', () => {
            renderWithTheme(<Input disabled placeholder="Á¶ÅÁî®ËæìÂÖ•Ê°Ü" />);

            const input = screen.getByPlaceholderText('Á¶ÅÁî®ËæìÂÖ•Ê°Ü');
            expect(input).toBeDisabled();
            expect(input).toHaveClass('opacity-50', 'cursor-not-allowed');
        });

        it('Â∫îËØ•ÊîØÊåÅÂè™ËØªÁä∂ÊÄÅ', () => {
            renderWithTheme(<Input readOnly value="Âè™ËØªÂÜÖÂÆπ" />);

            const input = screen.getByDisplayValue('Âè™ËØªÂÜÖÂÆπ');
            expect(input).toHaveAttribute('readonly');
        });
    });

    describe('Ê†áÁ≠æÂíåÊèèËø∞', () => {
        it('Â∫îËØ•Ê≠£Á°ÆÊ∏≤ÊüìÊ†áÁ≠æ', () => {
            renderWithTheme(<Input label="Áî®Êà∑Âêç" />);
            expect(screen.getByText('Áî®Êà∑Âêç')).toBeInTheDocument();
        });

        it('Â∫îËØ•ÊòæÁ§∫ÂøÖÂ°´Ê†áËÆ∞', () => {
            renderWithTheme(<Input label="ÂØÜÁ†Å" required />);
            expect(screen.getByText('*')).toBeInTheDocument();
            expect(screen.getByText('*')).toHaveClass('text-red-400');
        });

        it('Â∫îËØ•ÊòæÁ§∫ÊèèËø∞ÊñáÊú¨', () => {
            renderWithTheme(<Input description="ËØ∑ËæìÂÖ•6-20‰ΩçÂ≠óÁ¨¶" />);
            expect(screen.getByText('ËØ∑ËæìÂÖ•6-20‰ΩçÂ≠óÁ¨¶')).toBeInTheDocument();
        });

        it('Â∫îËØ•Ê≠£Á°ÆÂÖ≥ËÅîÊ†áÁ≠æÂíåËæìÂÖ•Ê°Ü', () => {
            renderWithTheme(<Input label="ÈÇÆÁÆ±Âú∞ÂùÄ" />);

            const label = screen.getByText('ÈÇÆÁÆ±Âú∞ÂùÄ');
            const input = screen.getByRole('textbox');

            expect(label).toHaveAttribute('for');
            expect(input).toHaveAttribute('id');
        });
    });

    describe('Áä∂ÊÄÅÊòæÁ§∫', () => {
        it('Â∫îËØ•ÊòæÁ§∫ÈîôËØØÁä∂ÊÄÅ', () => {
            renderWithTheme(<Input error="ËæìÂÖ•Ê†ºÂºè‰∏çÊ≠£Á°Æ" />);

            expect(screen.getByText('ËæìÂÖ•Ê†ºÂºè‰∏çÊ≠£Á°Æ')).toBeInTheDocument();
            expect(screen.getByText('ËæìÂÖ•Ê†ºÂºè‰∏çÊ≠£Á°Æ')).toHaveClass('text-red-400');

            const input = screen.getByRole('textbox');
            expect(input).toHaveClass('border-red-500');
        });

        it('Â∫îËØ•ÊòæÁ§∫ÊàêÂäüÁä∂ÊÄÅ', () => {
            renderWithTheme(<Input success="ËæìÂÖ•Ê≠£Á°Æ" />);

            expect(screen.getByText('ËæìÂÖ•Ê≠£Á°Æ')).toBeInTheDocument();
            expect(screen.getByText('ËæìÂÖ•Ê≠£Á°Æ')).toHaveClass('text-green-400');

            const input = screen.getByRole('textbox');
            expect(input).toHaveClass('border-green-500');
        });

        it('Â∫îËØ•ÊòæÁ§∫Âä†ËΩΩÁä∂ÊÄÅ', () => {
            renderWithTheme(<Input loading />);

            const input = screen.getByRole('textbox');
            expect(input.parentElement?.querySelector('.animate-spin')).toBeInTheDocument();
        });
    });

    describe('ÂõæÊ†áÊîØÊåÅ', () => {
        const TestIcon = () => <span data-testid="test-icon">üîç</span>;

        it('Â∫îËØ•ÊîØÊåÅÂ∑¶‰æßÂõæÊ†á', () => {
            renderWithTheme(<Input leftIcon={<TestIcon />} />);

            expect(screen.getByTestId('test-icon')).toBeInTheDocument();

            const input = screen.getByRole('textbox');
            expect(input).toHaveClass('pl-10');
        });

        it('Â∫îËØ•ÊîØÊåÅÂè≥‰æßÂõæÊ†á', () => {
            renderWithTheme(<Input rightIcon={<TestIcon />} />);

            expect(screen.getByTestId('test-icon')).toBeInTheDocument();

            const input = screen.getByRole('textbox');
            expect(input).toHaveClass('pr-10');
        });
    });

    describe('Âèò‰ΩìÊ†∑Âºè', () => {
        it('Â∫îËØ•Ê≠£Á°ÆÂ∫îÁî®defaultÂèò‰ΩìÊ†∑Âºè', () => {
            renderWithTheme(<Input variant="default" />);

            const input = screen.getByRole('textbox');
            expect(input).toHaveClass('bg-gray-700/50', 'border-gray-600/60');
        });

        it('Â∫îËØ•Ê≠£Á°ÆÂ∫îÁî®filledÂèò‰ΩìÊ†∑Âºè', () => {
            renderWithTheme(<Input variant="filled" />);

            const input = screen.getByRole('textbox');
            expect(input).toHaveClass('bg-gray-700', 'border-gray-700');
        });

        it('Â∫îËØ•Ê≠£Á°ÆÂ∫îÁî®outlinedÂèò‰ΩìÊ†∑Âºè', () => {
            renderWithTheme(<Input variant="outlined" />);

            const input = screen.getByRole('textbox');
            expect(input).toHaveClass('bg-transparent', 'border-gray-600');
        });
    });

    describe('Â∞∫ÂØ∏Ê†∑Âºè', () => {
        it('Â∫îËØ•Ê≠£Á°ÆÂ∫îÁî®smÂ∞∫ÂØ∏Ê†∑Âºè', () => {
            renderWithTheme(<Input size="sm" />);

            const input = screen.getByRole('textbox');
            expect(input).toHaveClass('px-3', 'py-1.5', 'text-sm');
        });

        it('Â∫îËØ•Ê≠£Á°ÆÂ∫îÁî®mdÂ∞∫ÂØ∏Ê†∑ÂºèÔºàÈªòËÆ§Ôºâ', () => {
            renderWithTheme(<Input size="md" />);

            const input = screen.getByRole('textbox');
            expect(input).toHaveClass('px-3', 'py-2', 'text-sm');
        });

        it('Â∫îËØ•Ê≠£Á°ÆÂ∫îÁî®lgÂ∞∫ÂØ∏Ê†∑Âºè', () => {
            renderWithTheme(<Input size="lg" />);

            const input = screen.getByRole('textbox');
            expect(input).toHaveClass('px-4', 'py-3', 'text-base');
        });
    });
});

describe('PasswordInputÁªÑ‰ª∂', () => {
    it('Â∫îËØ•ÈªòËÆ§ÈöêËóèÂØÜÁ†Å', () => {
        renderWithTheme(<PasswordInput />);

        const input = screen.getByRole('textbox');
        expect(input).toHaveAttribute('type', 'password');
    });

    it('Â∫îËØ•ÊîØÊåÅÂàáÊç¢ÂØÜÁ†ÅÂèØËßÅÊÄß', async () => {
        renderWithTheme(<PasswordInput />);

        const input = screen.getByRole('textbox');
        const toggleButton = screen.getByRole('button');

        expect(input).toHaveAttribute('type', 'password');

        await userEvent.click(toggleButton);
        expect(input).toHaveAttribute('type', 'text');

        await userEvent.click(toggleButton);
        expect(input).toHaveAttribute('type', 'password');
    });

    it('Â∫îËØ•ÊîØÊåÅÁ¶ÅÁî®ÂàáÊç¢ÂäüËÉΩ', () => {
        renderWithTheme(<PasswordInput showToggle={false} />);

        expect(screen.queryByRole('button')).not.toBeInTheDocument();
    });
});

describe('SearchInputÁªÑ‰ª∂', () => {
    it('Â∫îËØ•ÊòæÁ§∫ÊêúÁ¥¢ÂõæÊ†á', () => {
        renderWithTheme(<SearchInput />);

        const input = screen.getByRole('searchbox');
        expect(input.parentElement?.querySelector('svg')).toBeInTheDocument();
    });

    it('Â∫îËØ•ÊîØÊåÅÊêúÁ¥¢ÂäüËÉΩ', async () => {
        const handleSearch = vi.fn();
        renderWithTheme(<SearchInput onSearch={handleSearch} />);

        const input = screen.getByRole('searchbox');
        await userEvent.type(input, 'ÊêúÁ¥¢ÂÜÖÂÆπ');
        await userEvent.keyboard('{Enter}');

        expect(handleSearch).toHaveBeenCalledWith('ÊêúÁ¥¢ÂÜÖÂÆπ');
    });

    it('Â∫îËØ•ÊîØÊåÅÊ∏ÖÈô§ÂäüËÉΩ', async () => {
        const handleClear = vi.fn();
        renderWithTheme(<SearchInput onClear={handleClear} />);

        const input = screen.getByRole('searchbox');
        await userEvent.type(input, 'ÊµãËØïÂÜÖÂÆπ');

        const clearButton = screen.getByRole('button');
        await userEvent.click(clearButton);

        expect(handleClear).toHaveBeenCalled();
        expect(input).toHaveValue('');
    });
});

describe('NumberInputÁªÑ‰ª∂', () => {
    it('Â∫îËØ•Âè™Êé•ÂèóÊï∞Â≠óËæìÂÖ•', () => {
        renderWithTheme(<NumberInput />);

        const input = screen.getByRole('spinbutton');
        expect(input).toHaveAttribute('type', 'number');
    });

    it('Â∫îËØ•ÊîØÊåÅÊúÄÂ∞èÂÄºÂíåÊúÄÂ§ßÂÄº', () => {
        renderWithTheme(<NumberInput min={0} max={100} />);

        const input = screen.getByRole('spinbutton');
        expect(input).toHaveAttribute('min', '0');
        expect(input).toHaveAttribute('max', '100');
    });

    it('Â∫îËØ•ÊîØÊåÅÊ≠•Èïø', () => {
        renderWithTheme(<NumberInput step={0.1} />);

        const input = screen.getByRole('spinbutton');
        expect(input).toHaveAttribute('step', '0.1');
    });

    it('Â∫îËØ•ÊòæÁ§∫Â¢ûÂáèÊéßÂà∂ÊåâÈíÆ', () => {
        renderWithTheme(<NumberInput showControls />);

        const buttons = screen.getAllByRole('button');
        expect(buttons).toHaveLength(2); // Â¢ûÂä†ÂíåÂáèÂ∞ëÊåâÈíÆ
    });
});

describe('TextareaÁªÑ‰ª∂', () => {
    it('Â∫îËØ•Ê≠£Á°ÆÊ∏≤ÊüìÊñáÊú¨Âüü', () => {
        renderWithTheme(<Textarea placeholder="ËØ∑ËæìÂÖ•Â§öË°åÊñáÊú¨" />);
        expect(screen.getByPlaceholderText('ËØ∑ËæìÂÖ•Â§öË°åÊñáÊú¨')).toBeInTheDocument();
    });

    it('Â∫îËØ•ÊîØÊåÅË∞ÉÊï¥Â§ßÂ∞èËÆæÁΩÆ', () => {
        renderWithTheme(<Textarea resize="vertical" />);

        const textarea = screen.getByRole('textbox');
        expect(textarea).toHaveClass('resize-y');
    });

    it('Â∫îËØ•ÊúâÊúÄÂ∞èÈ´òÂ∫¶', () => {
        renderWithTheme(<Textarea />);

        const textarea = screen.getByRole('textbox');
        expect(textarea).toHaveClass('min-h-[80px]');
    });
});

describe('SelectÁªÑ‰ª∂', () => {
    const options = [
        { value: '1', label: 'ÈÄâÈ°π1' },
        { value: '2', label: 'ÈÄâÈ°π2' },
        { value: '3', label: 'ÈÄâÈ°π3', disabled: true },
    ];

    it('Â∫îËØ•Ê≠£Á°ÆÊ∏≤ÊüìÈÄâÊã©Ê°Ü', () => {
        renderWithTheme(<Select options={options} />);
        expect(screen.getByRole('combobox')).toBeInTheDocument();
    });

    it('Â∫îËØ•ÊòæÁ§∫Âç†‰ΩçÁ¨¶', () => {
        renderWithTheme(<Select options={options} placeholder="ËØ∑ÈÄâÊã©" />);
        expect(screen.getByText('ËØ∑ÈÄâÊã©')).toBeInTheDocument();
    });

    it('Â∫îËØ•Ê∏≤ÊüìÊâÄÊúâÈÄâÈ°π', () => {
        renderWithTheme(<Select options={options} />);

        expect(screen.getByText('ÈÄâÈ°π1')).toBeInTheDocument();
        expect(screen.getByText('ÈÄâÈ°π2')).toBeInTheDocument();
        expect(screen.getByText('ÈÄâÈ°π3')).toBeInTheDocument();
    });

    it('Â∫îËØ•ÊîØÊåÅÁ¶ÅÁî®ÈÄâÈ°π', () => {
        renderWithTheme(<Select options={options} />);

        const option3 = screen.getByText('ÈÄâÈ°π3').closest('option');
        expect(option3).toBeDisabled();
    });

    it('Â∫îËØ•ÊîØÊåÅÈÄâÊã©ÂÄº', async () => {
        const handleChange = vi.fn();
        renderWithTheme(<Select options={options} onChange={handleChange} />);

        const select = screen.getByRole('combobox');
        await userEvent.selectOptions(select, '2');

        expect(handleChange).toHaveBeenCalled();
    });
});

describe('ÂèØËÆøÈóÆÊÄß', () => {
    it('ËæìÂÖ•Ê°ÜÂ∫îËØ•ÊîØÊåÅÈîÆÁõòÂØºËà™', async () => {
        renderWithTheme(<Input />);

        const input = screen.getByRole('textbox');
        input.focus();

        expect(document.activeElement).toBe(input);
    });

    it('Â∫îËØ•ÊúâÊ≠£Á°ÆÁöÑÁÑ¶ÁÇπÊ†∑Âºè', () => {
        renderWithTheme(<Input />);

        const input = screen.getByRole('textbox');
        expect(input).toHaveClass('focus:outline-none', 'focus:ring-offset-2');
    });

    it('ÈîôËØØÁä∂ÊÄÅÂ∫îËØ•ÊúâÊ≠£Á°ÆÁöÑariaÂ±ûÊÄß', () => {
        renderWithTheme(<Input error="ÈîôËØØ‰ø°ÊÅØ" />);

        const input = screen.getByRole('textbox');
        expect(input).toHaveAttribute('aria-invalid', 'true');
    });

    it('ÂøÖÂ°´Â≠óÊÆµÂ∫îËØ•ÊúâÊ≠£Á°ÆÁöÑariaÂ±ûÊÄß', () => {
        renderWithTheme(<Input required />);

        const input = screen.getByRole('textbox');
        expect(input).toHaveAttribute('aria-required', 'true');
    });
});