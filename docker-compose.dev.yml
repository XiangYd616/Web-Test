version: '3.8'

# Test-Web-backend 开发环境 Docker Compose
# 专为后端API开发优化，支持热重载

services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: testweb-dev-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-testweb_dev}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - testweb-dev-network

  # Redis 缓存和队列
  redis:
    image: redis:7-alpine
    container_name: testweb-dev-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_dev_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - testweb-dev-network

  # 后端 API 服务 (开发模式)
  backend:
    build:
      context: .
      dockerfile: ./deploy/Dockerfile.dev
      args:
        NODE_VERSION: 20-alpine
    container_name: testweb-dev-backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-testweb_dev}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_URL: redis://redis:6379
      # JWT配置
      JWT_SECRET: ${JWT_SECRET:-dev-secret-key-change-in-production}
      JWT_EXPIRES_IN: 24h
      # CORS配置
      CORS_ORIGIN: http://localhost:5174,http://localhost:3000
      # 日志级别
      LOG_LEVEL: debug
      # 开发模式特性
      DEV_MODE: true
      DEBUG_ENABLED: true
    ports:
      - "${PORT:-3001}:3001"
    volumes:
      # 源代码热重载
      - ./backend:/app/backend:cached
      - ./shared:/app/shared:cached
      # 忽略 node_modules (使用容器内的)
      - /app/backend/node_modules
      # 持久化目录
      - ./backend/logs:/app/backend/logs
      - ./backend/uploads:/app/backend/uploads
      - ./backend/reports:/app/backend/reports
      - ./backend/exports:/app/backend/exports
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - testweb-dev-network

  # Adminer - 数据库管理工具
  adminer:
    image: adminer:latest
    container_name: testweb-dev-adminer
    restart: unless-stopped
    ports:
      - "${ADMINER_PORT:-8080}:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: nette
    depends_on:
      - postgres
    networks:
      - testweb-dev-network

  # RedisInsight - Redis 管理工具
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: testweb-dev-redis-insight
    restart: unless-stopped
    ports:
      - "${REDIS_INSIGHT_PORT:-8001}:8001"
    volumes:
      - redis_insight_data:/db
    depends_on:
      - redis
    networks:
      - testweb-dev-network

volumes:
  postgres_dev_data:
    name: testweb_dev_postgres_data
  redis_dev_data:
    name: testweb_dev_redis_data
  redis_insight_data:
    name: testweb_dev_redis_insight_data

networks:
  testweb-dev-network:
    name: testweb_dev_network
    driver: bridge

