version: '3.8'

services:
  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: test-web-postgres
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-testweb}
      POSTGRES_USER: ${DATABASE_USERNAME:-testweb}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-changeme}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    networks:
      - test-web-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME:-testweb}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: test-web-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-changeme}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - test-web-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # 后端API服务
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: test-web-backend
    environment:
      # 基本配置
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${PORT:-3001}
      
      # 数据库配置
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: ${DATABASE_NAME:-testweb}
      DATABASE_USERNAME: ${DATABASE_USERNAME:-testweb}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-changeme}
      DATABASE_SSL: "false"
      
      # Redis配置
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-changeme}
      
      # JWT配置
      JWT_SECRET: ${JWT_SECRET:-change-this-secret-in-production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-24h}
      
      # CORS配置
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      
      # 其他配置
      LOG_LEVEL: ${LOG_LEVEL:-info}
      MAX_CONCURRENT_TESTS: ${MAX_CONCURRENT_TESTS:-10}
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    ports:
      - "${PORT:-3001}:3001"
    networks:
      - test-web-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

networks:
  test-web-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

