name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: testweb

jobs:
  # 代码质量检查
  lint-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'

    - name: Install dependencies
      run: |
        yarn install --frozen-lockfile
        cd frontend && yarn install --frozen-lockfile
        cd ../backend && yarn install --frozen-lockfile

    - name: Run linting
      run: |
        yarn lint
        cd frontend && yarn lint
        cd ../backend && yarn lint

    - name: Run type checking
      run: |
        cd frontend && yarn type-check
        cd ../backend && yarn type-check

    - name: Run unit tests
      run: |
        yarn test:unit
        cd frontend && yarn test
        cd ../backend && yarn test

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage/lcov.info,./frontend/coverage/lcov.info,./backend/coverage/lcov.info

  # 集成测试
  integration-test:
    runs-on: ubuntu-latest
    needs: lint-and-test

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testweb_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'

    - name: Install dependencies
      run: |
        yarn install --frozen-lockfile
        cd frontend && yarn install --frozen-lockfile
        cd ../backend && yarn install --frozen-lockfile

    - name: Run database migrations
      run: cd backend && yarn migrate
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: testweb_test
        DB_USER: postgres
        DB_PASSWORD: testpassword

    - name: Run integration tests
      run: yarn test:integration
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: testweb_test
        DB_USER: postgres
        DB_PASSWORD: testpassword
        REDIS_HOST: localhost
        REDIS_PORT: 6379

  # E2E测试
  e2e-test:
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'

    - name: Install dependencies
      run: |
        yarn install --frozen-lockfile
        cd frontend && yarn install --frozen-lockfile
        cd ../backend && yarn install --frozen-lockfile

    - name: Install Playwright
      run: yarn dlx playwright install --with-deps

    - name: Build application
      run: |
        cd frontend && yarn build
        cd ../backend && yarn build

    - name: Start application
      run: yarn start:test &

    - name: Wait for application
      run: npx wait-on http://localhost:3000 --timeout 60000

    - name: Run E2E tests
      run: npx playwright test

    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: playwright-report/

  # 性能测试
  performance-test:
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Build and start application
      run: |
        cd frontend && npm run build
        cd ../backend && npm run build
        npm run start:prod &

    - name: Wait for application
      run: npx wait-on http://localhost:3000 --timeout 60000

    - name: Run load tests
      run: k6 run performance/load-test.js

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: load-test-results.json

  # 安全扫描
  security-scan:
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run npm audit
      run: |
        npm audit --audit-level high
        cd frontend && npm audit --audit-level high
        cd ../backend && npm audit --audit-level high

  # 构建Docker镜像
  build-image:
    runs-on: ubuntu-latest
    needs: [lint-and-test, integration-test, e2e-test]
    if: github.ref == 'refs/heads/main'

    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 部署到生产环境
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-image, performance-test, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production..."
        # 这里添加实际的部署脚本
        # 例如：kubectl apply -f k8s/ 或者调用部署API

    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        # 添加生产环境烟雾测试

    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()
