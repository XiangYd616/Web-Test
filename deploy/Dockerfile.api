# 多阶段构建 - API服务
FROM node:18-alpine AS base

# 设置工作目录
WORKDIR /app

# 安装系统依赖
RUN apk add --no-cache \
    curl \
    git \
    python3 \
    make \
    g++ \
    chromium \
    nss \
    freetype \
    freetype-dev \
    harfbuzz \
    ca-certificates \
    ttf-freefont

# 设置Chromium环境变量
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true \
    PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser

# 复制package文件
COPY package*.json yarn.lock ./
COPY server/package*.json ./server/

# 开发阶段
FROM base AS development

# 安装所有依赖（包括开发依赖）
RUN yarn install
RUN cd server && yarn install

# 安装测试引擎
RUN yarn global add k6 lighthouse
RUN yarn dlx playwright install --with-deps

# 复制源代码
COPY . .

# 暴露端口
EXPOSE 3001

# 开发命令
CMD ["yarn", "dev:server"]

# 生产构建阶段
FROM base AS build

# 安装依赖
RUN yarn install --production --frozen-lockfile
RUN cd server && yarn install --production --frozen-lockfile

# 复制源代码
COPY . .

# 构建应用
RUN yarn build:server

# 生产阶段
FROM node:18-alpine AS production

# 安装生产环境系统依赖
RUN apk add --no-cache \
    curl \
    chromium \
    nss \
    freetype \
    freetype-dev \
    harfbuzz \
    ca-certificates \
    ttf-freefont \
    dumb-init

# 设置环境变量
ENV NODE_ENV=production \
    PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true \
    PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser

# 创建非root用户
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# 设置工作目录
WORKDIR /app

# 复制package文件
COPY --chown=nodejs:nodejs package*.json yarn.lock ./
COPY --chown=nodejs:nodejs server/package*.json ./server/

# 安装生产依赖
RUN yarn install --production --frozen-lockfile && yarn cache clean
RUN cd server && yarn install --production --frozen-lockfile && yarn cache clean

# 安装测试引擎
RUN yarn global add k6 lighthouse
RUN yarn dlx playwright install --with-deps chromium

# 复制构建产物
COPY --from=build --chown=nodejs:nodejs /app/server/dist ./server/dist
COPY --from=build --chown=nodejs:nodejs /app/server/models ./server/models
COPY --from=build --chown=nodejs:nodejs /app/server/routes ./server/routes
COPY --from=build --chown=nodejs:nodejs /app/server/middleware ./server/middleware
COPY --from=build --chown=nodejs:nodejs /app/server/services ./server/services
COPY --from=build --chown=nodejs:nodejs /app/server/config ./server/config
COPY --from=build --chown=nodejs:nodejs /app/server/app.js ./server/

# 创建必要的目录
RUN mkdir -p /app/logs /app/temp /app/uploads && \
    chown -R nodejs:nodejs /app

# 切换到非root用户
USER nodejs

# 暴露端口
EXPOSE 3001

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:3001/health || exit 1

# 启动命令
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "server/app.js"]

# 测试阶段
FROM development AS test

# 复制测试文件
COPY tests/ ./tests/

# 运行测试
RUN yarn test

# 安全扫描阶段
FROM base AS security

# 安装安全扫描工具
RUN yarn global add audit-ci snyk

# 复制package文件
COPY package*.json yarn.lock ./
COPY server/package*.json ./server/

# 运行安全扫描
RUN yarn audit --level moderate
RUN cd server && yarn audit --level moderate

# 文档生成阶段
FROM base AS docs

# 安装文档工具
RUN yarn global add @apidevtools/swagger-parser swagger-ui-dist

# 复制API文档
COPY docs/ ./docs/
COPY server/docs/ ./server/docs/

# 生成API文档
RUN yarn docs:generate

# 多架构支持
FROM --platform=$BUILDPLATFORM node:18-alpine AS cross-build

ARG TARGETPLATFORM
ARG BUILDPLATFORM

RUN echo "Building for $TARGETPLATFORM on $BUILDPLATFORM"

# 根据目标平台安装相应的依赖
RUN if [ "$TARGETPLATFORM" = "linux/arm64" ]; then \
        apk add --no-cache python3 make g++; \
    fi

WORKDIR /app
COPY . .
RUN yarn install --production --frozen-lockfile
