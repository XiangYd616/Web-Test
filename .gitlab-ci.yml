stages:
  - validate
  - test
  - build
  - security
  - performance
  - deploy
  - post-deploy

variables:
  NODE_VERSION: "18"
  PYTHON_VERSION: "3.9"
  POSTGRES_DB: testweb_test
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_HOST_AUTH_METHOD: trust

# 缓存配置
.cache_template: &cache_template
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
      - .npm/

# 基础镜像配置
.node_template: &node_template
  image: node:${NODE_VERSION}
  before_script:
    - npm ci --cache .npm --prefer-offline

# 代码质量检查
code-quality:
  <<: *node_template
  <<: *cache_template
  stage: validate
  script:
    - npm run type-check
    - npm run lint --if-present
    - npm run format:check --if-present
  artifacts:
    reports:
      junit: reports/lint-results.xml
    when: always
    expire_in: 1 week

# 单元测试
unit-tests:
  <<: *node_template
  <<: *cache_template
  stage: test
  script:
    - npm run test:run
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  artifacts:
    reports:
      junit: reports/unit-tests.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
    paths:
      - coverage/
    when: always
    expire_in: 1 week

# 构建测试
build-web:
  <<: *node_template
  <<: *cache_template
  stage: build
  script:
    - npm run build
  artifacts:
    paths:
      - dist/
    expire_in: 1 week

build-desktop:
  <<: *node_template
  <<: *cache_template
  stage: build
  script:
    - npm run build:desktop:quick
  artifacts:
    paths:
      - dist-electron/
    expire_in: 1 week
  only:
    - main
    - develop

# 集成测试
integration-tests:
  <<: *node_template
  <<: *cache_template
  stage: test
  services:
    - postgres:13
  variables:
    DATABASE_URL: postgresql://postgres:postgres@postgres:5432/testweb_test
  script:
    - apt-get update -qq && apt-get install -y -qq python3 python3-pip
    - pip3 install playwright pytest
    - npx playwright install --with-deps
    - npm run preview &
    - sleep 15
    - npm run test:integration --if-present
    - npx playwright test --if-present
  artifacts:
    reports:
      junit: reports/integration-tests.xml
    paths:
      - test-results/
      - playwright-report/
    when: always
    expire_in: 1 week
  dependencies:
    - build-web

# 安全扫描
security-scan:
  image: aquasec/trivy:latest
  stage: security
  script:
    - trivy fs --format template --template "@contrib/sarif.tpl" -o trivy-results.sarif .
    - trivy fs --format table .
  artifacts:
    reports:
      sast: trivy-results.sarif
    when: always
    expire_in: 1 week

npm-audit:
  <<: *node_template
  <<: *cache_template
  stage: security
  script:
    - npm audit --audit-level=moderate
  allow_failure: true

security-tests:
  <<: *node_template
  <<: *cache_template
  stage: security
  script:
    - npm run preview &
    - sleep 15
    - |
      node -e "
      const { SecurityTestEngine } = require('./src/services/securityTestEngine');
      const engine = new SecurityTestEngine();
      const config = {
        url: 'http://localhost:4173',
        testSSL: false,
        testHeaders: true,
        testVulnerabilities: true,
        testAuthentication: false
      };
      engine.runSecurityTest(config).then(result => {
        console.log('Security Test Results:', JSON.stringify(result, null, 2));
        if (result.overallScore < 80) {
          console.warn('Security score below threshold');
        }
      }).catch(err => {
        console.error('Security test failed:', err);
        process.exit(1);
      });
      "
  dependencies:
    - build-web
  artifacts:
    reports:
      junit: reports/security-tests.xml
    when: always
    expire_in: 1 week

# 性能测试
performance-tests:
  <<: *node_template
  <<: *cache_template
  stage: performance
  script:
    - npm run preview &
    - sleep 15
    - |
      node -e "
      const { realStressTestEngine } = require('./src/services/realStressTestEngine');
      const config = {
        url: 'http://localhost:4173',
        users: 50,
        duration: 60,
        rampUpTime: 10
      };
      realStressTestEngine.runStressTest(config).then(result => {
        console.log('Performance Test Results:', JSON.stringify(result, null, 2));
        if (result.overallScore < 70) {
          process.exit(1);
        }
      }).catch(err => {
        console.error('Performance test failed:', err);
        process.exit(1);
      });
      "
  dependencies:
    - build-web
  artifacts:
    reports:
      performance: reports/performance-results.json
    when: always
    expire_in: 1 week
  only:
    - main
    - develop

api-performance-tests:
  <<: *node_template
  <<: *cache_template
  stage: performance
  script:
    - npm run preview &
    - sleep 15
    - |
      node -e "
      const { APITestEngine } = require('./src/services/apiTestEngine');
      const engine = new APITestEngine();
      const config = {
        baseUrl: 'http://localhost:4173',
        endpoints: [
          { id: '1', name: 'Health Check', method: 'GET', path: '/api/health', expectedStatus: [200], priority: 'high' }
        ],
        timeout: 5000,
        retries: 3,
        loadTest: true,
        concurrentUsers: 20,
        testSecurity: true,
        testPerformance: true,
        testReliability: true
      };
      engine.runAPITest(config).then(result => {
        console.log('API Performance Results:', JSON.stringify(result, null, 2));
        if (result.overallScore < 75) {
          process.exit(1);
        }
      }).catch(err => {
        console.error('API performance test failed:', err);
        process.exit(1);
      });
      "
  dependencies:
    - build-web
  artifacts:
    reports:
      junit: reports/api-performance-tests.xml
    when: always
    expire_in: 1 week
  only:
    - main
    - develop

# 质量门禁
quality-gate:
  image: alpine:latest
  stage: performance
  script:
    - echo "🔍 Checking quality metrics..."
    - |
      if [ "$UNIT_TESTS_STATUS" != "success" ]; then
        echo "❌ Unit tests failed"
        exit 1
      fi
    - |
      if [ "$INTEGRATION_TESTS_STATUS" != "success" ]; then
        echo "❌ Integration tests failed"
        exit 1
      fi
    - echo "✅ All quality checks passed!"
  dependencies:
    - unit-tests
    - integration-tests
    - security-tests
    - performance-tests

# 部署到测试环境
deploy-staging:
  <<: *node_template
  stage: deploy
  script:
    - echo "🚀 Deploying to staging environment..."
    - |
      # 部署到阿里云或其他云服务
      # 这里添加实际的部署脚本
      echo "Deploying to staging server..."
      # rsync -avz --delete dist/ user@staging-server:/var/www/testweb/
  environment:
    name: staging
    url: https://staging.testweb.app
  dependencies:
    - build-web
    - quality-gate
  only:
    - develop

# 部署到生产环境
deploy-production:
  <<: *node_template
  stage: deploy
  script:
    - echo "🚀 Deploying to production environment..."
    - |
      # 部署到生产环境
      echo "Deploying to production server..."
      # rsync -avz --delete dist/ user@production-server:/var/www/testweb/
  environment:
    name: production
    url: https://testweb.app
  dependencies:
    - build-web
    - quality-gate
  only:
    - main
  when: manual

# 部署桌面应用
deploy-desktop:
  <<: *node_template
  stage: deploy
  script:
    - echo "📦 Publishing desktop application..."
    - |
      # 发布到应用商店或下载服务器
      echo "Publishing desktop app..."
  dependencies:
    - build-desktop
    - quality-gate
  only:
    - main
  when: manual

# 部署后测试
post-deploy-staging:
  <<: *node_template
  stage: post-deploy
  script:
    - echo "🧪 Running post-deployment tests on staging..."
    - |
      # 冒烟测试
      curl -f https://staging.testweb.app/api/health || exit 1
      echo "✅ Staging deployment verified"
  dependencies:
    - deploy-staging
  only:
    - develop

post-deploy-production:
  <<: *node_template
  stage: post-deploy
  script:
    - echo "🧪 Running post-deployment tests on production..."
    - |
      # 生产环境冒烟测试
      curl -f https://testweb.app/api/health || exit 1
      echo "✅ Production deployment verified"
  dependencies:
    - deploy-production
  only:
    - main

# 定时任务 - 每日完整测试
scheduled-full-test:
  <<: *node_template
  <<: *cache_template
  stage: test
  script:
    - echo "🕐 Running scheduled full test suite..."
    - npm run test:run
    - npm run build
    - npm run preview &
    - sleep 15
    - |
      # 运行完整的测试套件
      node -e "
      const { realStressTestEngine } = require('./src/services/realStressTestEngine');
      const { APITestEngine } = require('./src/services/apiTestEngine');
      const { SecurityTestEngine } = require('./src/services/securityTestEngine');
      
      async function runFullTest() {
        console.log('🚀 Starting full test suite...');
        
        // 压力测试
        const stressResult = await realStressTestEngine.runStressTest({
          url: 'http://localhost:4173',
          users: 100,
          duration: 300,
          rampUpTime: 30
        });
        
        // API测试
        const apiResult = await new APITestEngine().runAPITest({
          baseUrl: 'http://localhost:4173',
          endpoints: [
            { id: '1', name: 'Health Check', method: 'GET', path: '/api/health', expectedStatus: [200], priority: 'high' }
          ],
          timeout: 10000,
          retries: 5,
          loadTest: true,
          concurrentUsers: 50,
          testSecurity: true,
          testPerformance: true,
          testReliability: true
        });
        
        // 安全测试
        const securityResult = await new SecurityTestEngine().runSecurityTest({
          url: 'http://localhost:4173',
          testSSL: false,
          testHeaders: true,
          testVulnerabilities: true,
          testAuthentication: false
        });
        
        console.log('📊 Full Test Results:');
        console.log('Stress Test Score:', stressResult.overallScore);
        console.log('API Test Score:', apiResult.overallScore);
        console.log('Security Test Score:', securityResult.overallScore);
        
        const overallScore = (stressResult.overallScore + apiResult.overallScore + securityResult.overallScore) / 3;
        console.log('Overall Score:', overallScore);
        
        if (overallScore < 75) {
          console.error('❌ Full test suite failed with score:', overallScore);
          process.exit(1);
        }
        
        console.log('✅ Full test suite passed with score:', overallScore);
      }
      
      runFullTest().catch(err => {
        console.error('Full test failed:', err);
        process.exit(1);
      });
      "
  only:
    variables:
      - $CI_PIPELINE_SOURCE == "schedule"
  artifacts:
    reports:
      junit: reports/scheduled-tests.xml
    when: always
    expire_in: 1 month
