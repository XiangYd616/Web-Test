# 多阶段构建 - Web前端
FROM node:18-alpine AS base

# 设置工作目录
WORKDIR /app

# 安装系统依赖
RUN apk add --no-cache curl git

# 复制package文件
COPY package*.json ./

# 开发阶段
FROM base AS development

# 安装所有依赖（包括开发依赖）
RUN npm ci --include=dev

# 复制源代码
COPY . .

# 暴露端口
EXPOSE 5174

# 开发命令
CMD ["npm", "run", "dev"]

# 构建阶段
FROM base AS build

# 设置构建参数
ARG VITE_API_URL=http://localhost:3001
ARG VITE_APP_NAME="Test Web App"
ARG VITE_APP_VERSION=1.0.0
ARG VITE_APP_DESCRIPTION="专业的网站测试平台"
ARG VITE_ENABLE_ANALYTICS=true
ARG VITE_ENABLE_PWA=true

# 设置环境变量
ENV VITE_API_URL=$VITE_API_URL \
    VITE_APP_NAME=$VITE_APP_NAME \
    VITE_APP_VERSION=$VITE_APP_VERSION \
    VITE_APP_DESCRIPTION=$VITE_APP_DESCRIPTION \
    VITE_ENABLE_ANALYTICS=$VITE_ENABLE_ANALYTICS \
    VITE_ENABLE_PWA=$VITE_ENABLE_PWA \
    NODE_ENV=production

# 安装依赖
RUN npm ci --only=production

# 复制源代码
COPY . .

# 构建应用
RUN npm run build

# 生产阶段 - Nginx
FROM nginx:alpine AS production

# 安装额外工具
RUN apk add --no-cache curl

# 复制自定义nginx配置
COPY docker/nginx.conf /etc/nginx/nginx.conf
COPY docker/nginx-default.conf /etc/nginx/conf.d/default.conf

# 复制构建产物
COPY --from=build /app/dist /usr/share/nginx/html

# 复制静态资源
COPY --from=build /app/public /usr/share/nginx/html

# 创建nginx用户和必要目录
RUN addgroup -g 101 -S nginx && \
    adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx && \
    mkdir -p /var/cache/nginx /var/log/nginx && \
    chown -R nginx:nginx /var/cache/nginx /var/log/nginx /usr/share/nginx/html

# 设置正确的权限
RUN chmod -R 755 /usr/share/nginx/html

# 创建健康检查页面
RUN echo '<!DOCTYPE html><html><head><title>Health Check</title></head><body><h1>OK</h1></body></html>' > /usr/share/nginx/html/health.html

# 暴露端口
EXPOSE 80

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:80/health.html || exit 1

# 启动nginx
CMD ["nginx", "-g", "daemon off;"]

# 测试阶段
FROM node:18-alpine AS test

WORKDIR /app

# 安装测试依赖
RUN apk add --no-cache chromium

# 设置Chromium环境变量
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true \
    PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser

# 复制package文件
COPY package*.json ./

# 安装依赖
RUN npm ci

# 复制源代码
COPY . .

# 运行测试
RUN npm run test:unit
RUN npm run test:e2e

# 静态分析阶段
FROM node:18-alpine AS lint

WORKDIR /app

# 复制package文件
COPY package*.json ./

# 安装依赖
RUN npm ci

# 复制源代码
COPY . .

# 运行代码检查
RUN npm run lint
RUN npm run type-check

# PWA构建阶段
FROM build AS pwa-build

# 安装PWA工具
RUN npm install -g @vite-pwa/cli

# 生成PWA资源
RUN npm run build:pwa

# PWA生产阶段
FROM production AS pwa

# 复制PWA构建产物
COPY --from=pwa-build /app/dist /usr/share/nginx/html

# 复制PWA配置
COPY docker/nginx-pwa.conf /etc/nginx/conf.d/pwa.conf

# 安全加固阶段
FROM production AS secure

# 复制安全配置
COPY docker/nginx-security.conf /etc/nginx/conf.d/security.conf

# 设置安全头
RUN echo 'add_header X-Frame-Options "SAMEORIGIN" always;' >> /etc/nginx/conf.d/security.conf && \
    echo 'add_header X-Content-Type-Options "nosniff" always;' >> /etc/nginx/conf.d/security.conf && \
    echo 'add_header X-XSS-Protection "1; mode=block" always;' >> /etc/nginx/conf.d/security.conf && \
    echo 'add_header Referrer-Policy "strict-origin-when-cross-origin" always;' >> /etc/nginx/conf.d/security.conf

# 移除不必要的文件
RUN rm -rf /usr/share/nginx/html/*.map

# 压缩静态资源
RUN find /usr/share/nginx/html -type f \( -name "*.js" -o -name "*.css" -o -name "*.html" \) -exec gzip -k {} \;

# 多架构支持
FROM --platform=$BUILDPLATFORM node:18-alpine AS cross-build

ARG TARGETPLATFORM
ARG BUILDPLATFORM

RUN echo "Building for $TARGETPLATFORM on $BUILDPLATFORM"

WORKDIR /app

# 复制源代码
COPY . .

# 安装依赖
RUN npm ci --only=production

# 构建应用
RUN npm run build

# 最终阶段选择
FROM production AS final
